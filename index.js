import "dotenv/config"; // Chargement des variables d'environnement
import mysql from "mysql2/promise"; // Import de MySQL avec support async/await
import app from "./src/app.js"; // Import de l'application Express

// D√©finition du port
const port = parseInt(process.env.APP_PORT ?? "4242", 10);

// R√©cup√©ration des informations de connexion MySQL
const { DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME } = process.env;

// Fonction pour tester la connexion √† la base de donn√©es
async function testDBConnection() {
  try {
    console.info("üîÑ Tentative de connexion √† la base de donn√©es...");

    const connection = await mysql.createConnection({
      host: DB_HOST,
      port: DB_PORT,
      user: DB_USER,
      password: DB_PASSWORD,
      database: DB_NAME,
    });

    console.info("‚úÖ Connexion √† MySQL r√©ussie !");
    await connection.end();

    return true;
  } catch (error) {
    console.error("‚ùå Erreur de connexion √† MySQL :", error);
    return false;
  }
}

// D√©marrer le serveur uniquement si la connexion MySQL est OK
async function startServer() {
  const dbConnected = await testDBConnection();

  if (dbConnected) {
    console.info(`üîÑ Initialisation du serveur sur le port ${port}...`);

    app.listen(port, (err) => {
      if (err) {
        console.error("‚ùå Erreur lors du d√©marrage du serveur :", err);
      } else {
        console.info(`‚úÖ Serveur op√©rationnel sur http://localhost:${port}`);
      }
    });
  } else {
    console.error("‚ùå √âchec du d√©marrage du serveur : connexion MySQL non √©tablie.");
    process.exit(1); // Quitter l'application si la base de donn√©es ne r√©pond pas
  }
}

// Ex√©cution du serveur
startServer();
